
AWSTemplateFormatVersion: "2010-09-09"
Description: Network conf for Aloa infrastructure testing

#-------------------------------------------------------------------------------
#--[ PARAMETERS ]---------------------------------------------------------------
#-------------------------------------------------------------------------------

Parameters:

  ClientName:
    Type: String
    Description: Nom complet du client

  VPCId:
    Type: Number
    Default: 3
    Description: "ID du VPC : 10.<ID>.0.0/16
    
  CidrBlockPublicA:
    Type: String

  CidrBlockPublicB:
    Type: String

  CidrBlockPublicC:
    Type: String

  CidrBlockPrivateA:
    Type: String

  CidrBlockPrivateB:
    Type: String

  CidrBlockPrivateC:
    Type: String

#----------------------------------------------------------------------
#--[ Resourses ]-------------------------------------------------------
#----------------------------------------------------------------------
    
Resources:

# Network

  VPC:
    Type: "AWS::EC2::VPC"
    Properties: 
      CidrBlock: !Sub
        - 10.${id}.0.0/16
        - { id: !Ref VPCId }
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: !Ref ClientName

# Internet Gateway
  Igw:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value: !Ref ClientName

  EgressOnlyInternetGateway:
    Type: "AWS::EC2::EgressOnlyInternetGateway"
    Properties:
      VpcId: !Ref VPC

# Attach Internet Gateway 

  IgwAttach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties: 
      InternetGatewayId: !Ref Igw
      VpcId: !Ref VPC

# Subnets - privates + publics in separate AZs

  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties: 
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Sub
        - 10.${id}.1.0/24
        - { id: !Ref VPCId }
      MapPublicIpOnLaunch: True
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public-a

  PublicSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties: 
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Sub
        - 10.${id}.2.0/24
        - { id: !Ref VPCId }
      MapPublicIpOnLaunch: True
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public-b

  PublicSubnetC:
    Type: "AWS::EC2::Subnet"
    Properties: 
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Sub
        - 10.${id}.3.0/24
        - { id: !Ref VPCId }
      MapPublicIpOnLaunch: True
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public-c

          
  PrivateSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties: 
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Sub
        - 10.${id}.4.0/24
        - { id: !Ref VPCId }
      MapPublicIpOnLaunch: False
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: private-a

  PrivateSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties: 
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Sub
        - 10.${id}.5.0/24
        - { id: !Ref VPCId }
      MapPublicIpOnLaunch: False
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: private-b
  
  PrivateSubnetC:
    Type: "AWS::EC2::Subnet"
    Properties: 
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Sub
        - 10.${id}.6.0/24
        - { id: !Ref VPCId }
      MapPublicIpOnLaunch: False
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: private-c

# Route Tables

  RouteTablePublic:
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public

  RouteTablePrivate:
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: private

# Route Table Associations
 
  PublicSubnetAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnetA

  PublicSubnetAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnetB

  PublicSubnetAssociationC:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnetC

  PrivateSubnetAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnetB

  PrivateSubnetAssociationC:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnetC

# S3 Endpoint and Routes

  S3Endpoint: 
    Type: "AWS::EC2::VPCEndpoint"
    Properties: 
      RouteTableIds: 
        - !Ref RouteTablePrivate
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcId: !Ref VPC
 
  PrivateRoute:
    Type: "AWS::EC2::Route"
    DependsOn: EgressOnlyInternetGateway
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationIpv6CidrBlock: ::/0
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: Igw
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw


#Security groups

  AdmSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: 'Allow ssh in and all trafic out'
      VpcId:!Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: Sgp-adm


  SecurityGroupwww:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: 'Allow http trafic from anywhere and ssh only from adm '
      VpcId:!Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: 
            Ref: AdmSecurityGroup
      Tags: 
        - Key: Name
          Value: Sgp-wwww


  AlbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: 'Allow http trafic from anywhere and ssh only from adm '
      VpcId:!Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: 
            Ref: AdmSecurityGroup
      Tags: 
        - Key: Name
          Value: Sgp-alb

